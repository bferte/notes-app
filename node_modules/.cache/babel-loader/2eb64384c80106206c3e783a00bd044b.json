{"ast":null,"code":"const URL = \"https://api.myidea.fr/v1/\";\nexport function getNotes() {\n  return new Promise((resolve, reject) => {\n    window.fetch(URL + 'notes').then(response => response.json()).then(result => {\n      console.log('Réponse API getNotes', result);\n      resolve(result);\n    }).catch(error => {\n      console.error(error);\n      reject(error);\n    });\n  });\n}\nexport function createNote(note) {\n  return new Promise((resolve, reject) => {\n    if (note.title && note.description) {\n      var body = {\n        title: note.title,\n        description: note.description\n      };\n      var params = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        },\n        cache: 'default',\n        body: JSON.stringify(body)\n      };\n      fetch(URL + 'notes', params).then(response => {\n        console.log(response);\n        resolve();\n      }).catch(error => reject(error));\n    } else {\n      reject('Informations manquantes');\n    }\n  });\n}\nexport function deleteNote(noteId) {\n  return new Promise((resolve, reject) => {\n    if (noteId) {\n      var params = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        },\n        cache: 'default'\n      };\n      fetch(URL + 'notes/' + nodeId, params).then(response => {\n        console.log(response);\n        resolve();\n      }).catch(error => reject(error));\n    } else {\n      reject('Informations manquantes');\n    }\n  });\n}","map":{"version":3,"sources":["/Users/briacferte/Desktop/DEV/mdc/framework js/exo2 bloc note/notes-app/src/service/Api.js"],"names":["URL","getNotes","Promise","resolve","reject","window","fetch","then","response","json","result","console","log","catch","error","createNote","note","title","description","body","params","method","headers","cache","JSON","stringify","deleteNote","noteId","nodeId"],"mappings":"AAAA,MAAMA,GAAG,GAAG,2BAAZ;AAEA,OAAO,SAASC,QAAT,GAAqB;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxCC,IAAAA,MAAM,CAACC,KAAP,CAAaN,GAAG,GAAG,OAAnB,EACCO,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,MAAM,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,MAApC;AACAP,MAAAA,OAAO,CAACO,MAAD,CAAP;AACH,KALD,EAMCG,KAND,CAMOC,KAAK,IAAI;AACZH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACAV,MAAAA,MAAM,CAACU,KAAD,CAAN;AACC,KATL;AAUC,GAXM,CAAP;AAYH;AAKD,OAAO,SAASC,UAAT,CAAqBC,IAArB,EAA2B;AAC9B,SAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACxC,QAAIY,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,WAAvB,EAAoC;AAGhC,UAAIC,IAAI,GAAG;AACPF,QAAAA,KAAK,EAAED,IAAI,CAACC,KADL;AAEPC,QAAAA,WAAW,EAAEF,IAAI,CAACE;AAFX,OAAX;AAMA,UAAIE,MAAM,GAAG;AAAEC,QAAAA,MAAM,EAAE,MAAV;AACEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SADX;AAIEC,QAAAA,KAAK,EAAE,SAJT;AAKEJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AALR,OAAb;AAOAb,MAAAA,KAAK,CAACN,GAAG,GAAG,OAAP,EAAgBoB,MAAhB,CAAL,CACCb,IADD,CACMC,QAAQ,IAAI;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAL,QAAAA,OAAO;AACV,OAJD,EAKCU,KALD,CAKOC,KAAK,IAAIV,MAAM,CAACU,KAAD,CALtB;AAOD,KAvBH,MAuBS;AACHV,MAAAA,MAAM,CAAC,yBAAD,CAAN;AACH;AACF,GA3BM,CAAP;AA4BH;AAED,OAAO,SAASsB,UAAT,CAAqBC,MAArB,EAA6B;AAChC,SAAO,IAAIzB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAIuB,MAAJ,EAAY;AAIR,UAAIP,MAAM,GAAG;AAAEC,QAAAA,MAAM,EAAE,QAAV;AACEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SADX;AAIEC,QAAAA,KAAK,EAAE;AAJT,OAAb;AAOAjB,MAAAA,KAAK,CAACN,GAAG,GAAG,QAAN,GAAiB4B,MAAlB,EAA0BR,MAA1B,CAAL,CACCb,IADD,CACMC,QAAQ,IAAI;AACdG,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAL,QAAAA,OAAO;AACV,OAJD,EAKCU,KALD,CAKOC,KAAK,IAAIV,MAAM,CAACU,KAAD,CALtB;AAOD,KAlBH,MAkBS;AACHV,MAAAA,MAAM,CAAC,yBAAD,CAAN;AACH;AACF,GAtBE,CAAP;AAyBH","sourcesContent":["const URL = \"https://api.myidea.fr/v1/\"\n\nexport function getNotes () {\n    return new Promise((resolve, reject) => {\n    window.fetch(URL + 'notes')\n    .then(response => response.json())\n    .then(result => {\n        console.log('Réponse API getNotes', result)\n        resolve(result)\n    })\n    .catch(error => {\n        console.error(error)\n        reject(error)\n        })\n    })\n}\n\n\n\n\nexport function createNote (note) {\n    return new Promise((resolve, reject) => {\n    if (note.title && note.description) {\n        \n\n        var body = {\n            title: note.title,\n            description: note.description\n        }\n\n\n        var params = { method: 'POST',\n                       headers: {\n                           'Content-Type': 'application/json; charset=UTF-8'\n                       },\n                       cache: 'default',\n                       body: JSON.stringify(body)\n                     };\n        fetch(URL + 'notes', params)\n        .then(response => { \n            console.log(response)\n            resolve()\n        })\n        .catch(error => reject(error))\n\n      } else {\n          reject('Informations manquantes')\n      }\n    })\n}\n\nexport function deleteNote (noteId) {\n    return new Promise((resolve, reject) => {\n        if (noteId) {\n            \n    \n            \n            var params = { method: 'DELETE',\n                           headers: {\n                               'Content-Type': 'application/json; charset=UTF-8'\n                           },\n                           cache: 'default',\n                           \n                         };\n            fetch(URL + 'notes/' + nodeId, params)\n            .then(response => { \n                console.log(response)\n                resolve()\n            })\n            .catch(error => reject(error))\n    \n          } else {\n              reject('Informations manquantes')\n          }\n        })\n\n    \n}"]},"metadata":{},"sourceType":"module"}